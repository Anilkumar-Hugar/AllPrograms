import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

 

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

 

@Service
public class JwtService {

 

    @Value("${jwt.secret}")
    private String secret;

 

    @Value("${jwt.expiration}")
    private int expiration;

 

    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, userDetails.getUsername());
    }

 

    private String createToken(Map<String, Object> claims, String subject) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + expiration * 1000);
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(SignatureAlgorithm.HS256, secret)
                .compact();
    }

 

    public boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

 

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

 

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

 

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

 

    private Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
    }

 

    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }
}







===================================================================================================================







import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

 
@Component
public class JwtTokenUtil {

 

    private static final String SECRET_KEY = "mysecretkey"; // Replace with your own secret key

 

    // Generate a JWT token for a user with the given username and roles
    public static String generateToken(String username, String[] roles) {

 

        Map<String, Object> claims = new HashMap<>();
        claims.put("sub", username);
        claims.put("roles", roles);

 

        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + 3600000); // Set token expiration time to 1 hour from now

 

        return Jwts.builder()
                .setClaims(claims)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

 

    // Validate a JWT token and extract user information
    public static Claims validateToken(String token) {

 

        return Jwts.parser()
                .setSigningKey(SECRET_KEY)
                .parseClaimsJws(token)
                .getBody();
    }
}





================================================================================================================

CONTROLLER CLASS:

@RestController
@RequestMapping("/api/auth")
public class AuthController {

@Autowired
private AuthenticationManager authenticationManager;

@Autowired
private UserRepository userRepository;

@Autowired
private JwtUtils jwtUtils;

@PostMapping("/login")
public ResponseEntity<?> authenticateUser(@RequestBody LoginRequest loginRequest) {
Authentication authentication = authenticationManager.authenticate(
new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
SecurityContextHolder.getContext().setAuthentication(authentication);
String jwt = jwtUtils.generateJwtToken(authentication);
UserDetails userDetails = (UserDetails) authentication.getPrincipal();
return ResponseEntity.ok(new JwtResponse(jwt, userDetails.getUsername()));
}

@PostMapping("/register")
public ResponseEntity<?> registerUser(@RequestBody SignupRequest signupRequest) {
if (userRepository.existsByUsername(signupRequest.getUsername())) {
return ResponseEntity.badRequest().body("Error: Username is already taken!");
}
User user = new User(signupRequest.getUsername(), signupRequest.getPassword());
userRepository.save(user);
return ResponseEntity.ok("User registered successfully!");
}

}
==============================================================================================================